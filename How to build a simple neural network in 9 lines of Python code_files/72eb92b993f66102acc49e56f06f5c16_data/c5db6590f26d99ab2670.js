document.write('<link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist-embed-13deff4f8c8e95f7a1da017b6983e81f.css">')
document.write('<div id=\"gist24469786\" class=\"gist\">\n    <div class=\"gist-file\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-main-py\" class=\"file\">\n    \n\n  <div itemprop=\"text\" class=\"blob-wrapper data type-python \">\n      \n\n\n<table class=\"highlight tab-size js-file-line-container\" data-tab-size=\"8\">\n      <tr>\n        <td id=\"file-main-py-L1\" class=\"blob-num js-line-number\" data-line-number=\"1\"><\/td>\n        <td id=\"file-main-py-LC1\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">from<\/span> numpy <span class=\"pl-k\">import<\/span> exp, array, random, dot<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L2\" class=\"blob-num js-line-number\" data-line-number=\"2\"><\/td>\n        <td id=\"file-main-py-LC2\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L3\" class=\"blob-num js-line-number\" data-line-number=\"3\"><\/td>\n        <td id=\"file-main-py-LC3\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L4\" class=\"blob-num js-line-number\" data-line-number=\"4\"><\/td>\n        <td id=\"file-main-py-LC4\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">class<\/span> <span class=\"pl-en\">NeuralNetwork<\/span>():<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L5\" class=\"blob-num js-line-number\" data-line-number=\"5\"><\/td>\n        <td id=\"file-main-py-LC5\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">def<\/span> <span class=\"pl-c1\">__init__<\/span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self<\/span><\/span>):<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L6\" class=\"blob-num js-line-number\" data-line-number=\"6\"><\/td>\n        <td id=\"file-main-py-LC6\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> Seed the random number generator, so it generates the same numbers<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L7\" class=\"blob-num js-line-number\" data-line-number=\"7\"><\/td>\n        <td id=\"file-main-py-LC7\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> every time the program runs.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L8\" class=\"blob-num js-line-number\" data-line-number=\"8\"><\/td>\n        <td id=\"file-main-py-LC8\" class=\"blob-code blob-code-inner js-file-line\">        random.seed(<span class=\"pl-c1\">1<\/span>)<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L9\" class=\"blob-num js-line-number\" data-line-number=\"9\"><\/td>\n        <td id=\"file-main-py-LC9\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L10\" class=\"blob-num js-line-number\" data-line-number=\"10\"><\/td>\n        <td id=\"file-main-py-LC10\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> We model a single neuron, with 3 input connections and 1 output connection.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L11\" class=\"blob-num js-line-number\" data-line-number=\"11\"><\/td>\n        <td id=\"file-main-py-LC11\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> We assign random weights to a 3 x 1 matrix, with values in the range -1 to 1<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L12\" class=\"blob-num js-line-number\" data-line-number=\"12\"><\/td>\n        <td id=\"file-main-py-LC12\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> and mean 0.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L13\" class=\"blob-num js-line-number\" data-line-number=\"13\"><\/td>\n        <td id=\"file-main-py-LC13\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-c1\">self<\/span>.synaptic_weights <span class=\"pl-k\">=<\/span> <span class=\"pl-c1\">2<\/span> <span class=\"pl-k\">*<\/span> random.random((<span class=\"pl-c1\">3<\/span>, <span class=\"pl-c1\">1<\/span>)) <span class=\"pl-k\">-<\/span> <span class=\"pl-c1\">1<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L14\" class=\"blob-num js-line-number\" data-line-number=\"14\"><\/td>\n        <td id=\"file-main-py-LC14\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L15\" class=\"blob-num js-line-number\" data-line-number=\"15\"><\/td>\n        <td id=\"file-main-py-LC15\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> The Sigmoid function, which describes an S shaped curve.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L16\" class=\"blob-num js-line-number\" data-line-number=\"16\"><\/td>\n        <td id=\"file-main-py-LC16\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> We pass the weighted sum of the inputs through this function to<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L17\" class=\"blob-num js-line-number\" data-line-number=\"17\"><\/td>\n        <td id=\"file-main-py-LC17\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> normalise them between 0 and 1.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L18\" class=\"blob-num js-line-number\" data-line-number=\"18\"><\/td>\n        <td id=\"file-main-py-LC18\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">def<\/span> <span class=\"pl-en\">__sigmoid<\/span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self<\/span><\/span>, <span class=\"pl-smi\">x<\/span>):<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L19\" class=\"blob-num js-line-number\" data-line-number=\"19\"><\/td>\n        <td id=\"file-main-py-LC19\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">return<\/span> <span class=\"pl-c1\">1<\/span> <span class=\"pl-k\">/<\/span> (<span class=\"pl-c1\">1<\/span> <span class=\"pl-k\">+<\/span> exp(<span class=\"pl-k\">-<\/span>x))<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L20\" class=\"blob-num js-line-number\" data-line-number=\"20\"><\/td>\n        <td id=\"file-main-py-LC20\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L21\" class=\"blob-num js-line-number\" data-line-number=\"21\"><\/td>\n        <td id=\"file-main-py-LC21\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> The derivative of the Sigmoid function.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L22\" class=\"blob-num js-line-number\" data-line-number=\"22\"><\/td>\n        <td id=\"file-main-py-LC22\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> This is the gradient of the Sigmoid curve.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L23\" class=\"blob-num js-line-number\" data-line-number=\"23\"><\/td>\n        <td id=\"file-main-py-LC23\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> It indicates how confident we are about the existing weight.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L24\" class=\"blob-num js-line-number\" data-line-number=\"24\"><\/td>\n        <td id=\"file-main-py-LC24\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">def<\/span> <span class=\"pl-en\">__sigmoid_derivative<\/span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self<\/span><\/span>, <span class=\"pl-smi\">x<\/span>):<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L25\" class=\"blob-num js-line-number\" data-line-number=\"25\"><\/td>\n        <td id=\"file-main-py-LC25\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">return<\/span> x <span class=\"pl-k\">*<\/span> (<span class=\"pl-c1\">1<\/span> <span class=\"pl-k\">-<\/span> x)<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L26\" class=\"blob-num js-line-number\" data-line-number=\"26\"><\/td>\n        <td id=\"file-main-py-LC26\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L27\" class=\"blob-num js-line-number\" data-line-number=\"27\"><\/td>\n        <td id=\"file-main-py-LC27\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> We train the neural network through a process of trial and error.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L28\" class=\"blob-num js-line-number\" data-line-number=\"28\"><\/td>\n        <td id=\"file-main-py-LC28\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> Adjusting the synaptic weights each time.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L29\" class=\"blob-num js-line-number\" data-line-number=\"29\"><\/td>\n        <td id=\"file-main-py-LC29\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">def<\/span> <span class=\"pl-en\">train<\/span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self<\/span><\/span>, <span class=\"pl-smi\">training_set_inputs<\/span>, <span class=\"pl-smi\">training_set_outputs<\/span>, <span class=\"pl-smi\">number_of_training_iterations<\/span>):<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L30\" class=\"blob-num js-line-number\" data-line-number=\"30\"><\/td>\n        <td id=\"file-main-py-LC30\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">for<\/span> iteration <span class=\"pl-k\">in<\/span> <span class=\"pl-v\">xrange<\/span>(number_of_training_iterations):<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L31\" class=\"blob-num js-line-number\" data-line-number=\"31\"><\/td>\n        <td id=\"file-main-py-LC31\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> Pass the training set through our neural network (a single neuron).<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L32\" class=\"blob-num js-line-number\" data-line-number=\"32\"><\/td>\n        <td id=\"file-main-py-LC32\" class=\"blob-code blob-code-inner js-file-line\">            output <span class=\"pl-k\">=<\/span> <span class=\"pl-c1\">self<\/span>.think(training_set_inputs)<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L33\" class=\"blob-num js-line-number\" data-line-number=\"33\"><\/td>\n        <td id=\"file-main-py-LC33\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L34\" class=\"blob-num js-line-number\" data-line-number=\"34\"><\/td>\n        <td id=\"file-main-py-LC34\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> Calculate the error (The difference between the desired output<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L35\" class=\"blob-num js-line-number\" data-line-number=\"35\"><\/td>\n        <td id=\"file-main-py-LC35\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> and the predicted output).<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L36\" class=\"blob-num js-line-number\" data-line-number=\"36\"><\/td>\n        <td id=\"file-main-py-LC36\" class=\"blob-code blob-code-inner js-file-line\">            error <span class=\"pl-k\">=<\/span> training_set_outputs <span class=\"pl-k\">-<\/span> output<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L37\" class=\"blob-num js-line-number\" data-line-number=\"37\"><\/td>\n        <td id=\"file-main-py-LC37\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L38\" class=\"blob-num js-line-number\" data-line-number=\"38\"><\/td>\n        <td id=\"file-main-py-LC38\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> Multiply the error by the input and again by the gradient of the Sigmoid curve.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L39\" class=\"blob-num js-line-number\" data-line-number=\"39\"><\/td>\n        <td id=\"file-main-py-LC39\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> This means less confident weights are adjusted more.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L40\" class=\"blob-num js-line-number\" data-line-number=\"40\"><\/td>\n        <td id=\"file-main-py-LC40\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> This means inputs, which are zero, do not cause changes to the weights.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L41\" class=\"blob-num js-line-number\" data-line-number=\"41\"><\/td>\n        <td id=\"file-main-py-LC41\" class=\"blob-code blob-code-inner js-file-line\">            adjustment <span class=\"pl-k\">=<\/span> dot(training_set_inputs.T, error <span class=\"pl-k\">*<\/span> <span class=\"pl-c1\">self<\/span>.__sigmoid_derivative(output))<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L42\" class=\"blob-num js-line-number\" data-line-number=\"42\"><\/td>\n        <td id=\"file-main-py-LC42\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L43\" class=\"blob-num js-line-number\" data-line-number=\"43\"><\/td>\n        <td id=\"file-main-py-LC43\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> Adjust the weights.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L44\" class=\"blob-num js-line-number\" data-line-number=\"44\"><\/td>\n        <td id=\"file-main-py-LC44\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-c1\">self<\/span>.synaptic_weights <span class=\"pl-k\">+=<\/span> adjustment<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L45\" class=\"blob-num js-line-number\" data-line-number=\"45\"><\/td>\n        <td id=\"file-main-py-LC45\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L46\" class=\"blob-num js-line-number\" data-line-number=\"46\"><\/td>\n        <td id=\"file-main-py-LC46\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> The neural network thinks.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L47\" class=\"blob-num js-line-number\" data-line-number=\"47\"><\/td>\n        <td id=\"file-main-py-LC47\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">def<\/span> <span class=\"pl-en\">think<\/span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self<\/span><\/span>, <span class=\"pl-smi\">inputs<\/span>):<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L48\" class=\"blob-num js-line-number\" data-line-number=\"48\"><\/td>\n        <td id=\"file-main-py-LC48\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> Pass inputs through our neural network (our single neuron).<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L49\" class=\"blob-num js-line-number\" data-line-number=\"49\"><\/td>\n        <td id=\"file-main-py-LC49\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">return<\/span> <span class=\"pl-c1\">self<\/span>.__sigmoid(dot(inputs, <span class=\"pl-c1\">self<\/span>.synaptic_weights))<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L50\" class=\"blob-num js-line-number\" data-line-number=\"50\"><\/td>\n        <td id=\"file-main-py-LC50\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L51\" class=\"blob-num js-line-number\" data-line-number=\"51\"><\/td>\n        <td id=\"file-main-py-LC51\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L52\" class=\"blob-num js-line-number\" data-line-number=\"52\"><\/td>\n        <td id=\"file-main-py-LC52\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">if<\/span> <span class=\"pl-c1\">__name__<\/span> <span class=\"pl-k\">==<\/span> <span class=\"pl-s\"><span class=\"pl-pds\">&quot;<\/span>__main__<span class=\"pl-pds\">&quot;<\/span><\/span>:<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L53\" class=\"blob-num js-line-number\" data-line-number=\"53\"><\/td>\n        <td id=\"file-main-py-LC53\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L54\" class=\"blob-num js-line-number\" data-line-number=\"54\"><\/td>\n        <td id=\"file-main-py-LC54\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c\"><span class=\"pl-c\">#<\/span>Intialise a single neuron neural network.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L55\" class=\"blob-num js-line-number\" data-line-number=\"55\"><\/td>\n        <td id=\"file-main-py-LC55\" class=\"blob-code blob-code-inner js-file-line\">    neural_network <span class=\"pl-k\">=<\/span> NeuralNetwork()<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L56\" class=\"blob-num js-line-number\" data-line-number=\"56\"><\/td>\n        <td id=\"file-main-py-LC56\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L57\" class=\"blob-num js-line-number\" data-line-number=\"57\"><\/td>\n        <td id=\"file-main-py-LC57\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c1\">print<\/span> <span class=\"pl-s\"><span class=\"pl-pds\">&quot;<\/span>Random starting synaptic weights: <span class=\"pl-pds\">&quot;<\/span><\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L58\" class=\"blob-num js-line-number\" data-line-number=\"58\"><\/td>\n        <td id=\"file-main-py-LC58\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c1\">print<\/span> neural_network.synaptic_weights<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L59\" class=\"blob-num js-line-number\" data-line-number=\"59\"><\/td>\n        <td id=\"file-main-py-LC59\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L60\" class=\"blob-num js-line-number\" data-line-number=\"60\"><\/td>\n        <td id=\"file-main-py-LC60\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> The training set. We have 4 examples, each consisting of 3 input values<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L61\" class=\"blob-num js-line-number\" data-line-number=\"61\"><\/td>\n        <td id=\"file-main-py-LC61\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> and 1 output value.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L62\" class=\"blob-num js-line-number\" data-line-number=\"62\"><\/td>\n        <td id=\"file-main-py-LC62\" class=\"blob-code blob-code-inner js-file-line\">    training_set_inputs <span class=\"pl-k\">=<\/span> array([[<span class=\"pl-c1\">0<\/span>, <span class=\"pl-c1\">0<\/span>, <span class=\"pl-c1\">1<\/span>], [<span class=\"pl-c1\">1<\/span>, <span class=\"pl-c1\">1<\/span>, <span class=\"pl-c1\">1<\/span>], [<span class=\"pl-c1\">1<\/span>, <span class=\"pl-c1\">0<\/span>, <span class=\"pl-c1\">1<\/span>], [<span class=\"pl-c1\">0<\/span>, <span class=\"pl-c1\">1<\/span>, <span class=\"pl-c1\">1<\/span>]])<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L63\" class=\"blob-num js-line-number\" data-line-number=\"63\"><\/td>\n        <td id=\"file-main-py-LC63\" class=\"blob-code blob-code-inner js-file-line\">    training_set_outputs <span class=\"pl-k\">=<\/span> array([[<span class=\"pl-c1\">0<\/span>, <span class=\"pl-c1\">1<\/span>, <span class=\"pl-c1\">1<\/span>, <span class=\"pl-c1\">0<\/span>]]).T<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L64\" class=\"blob-num js-line-number\" data-line-number=\"64\"><\/td>\n        <td id=\"file-main-py-LC64\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L65\" class=\"blob-num js-line-number\" data-line-number=\"65\"><\/td>\n        <td id=\"file-main-py-LC65\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> Train the neural network using a training set.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L66\" class=\"blob-num js-line-number\" data-line-number=\"66\"><\/td>\n        <td id=\"file-main-py-LC66\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> Do it 10,000 times and make small adjustments each time.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L67\" class=\"blob-num js-line-number\" data-line-number=\"67\"><\/td>\n        <td id=\"file-main-py-LC67\" class=\"blob-code blob-code-inner js-file-line\">    neural_network.train(training_set_inputs, training_set_outputs, <span class=\"pl-c1\">10000<\/span>)<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L68\" class=\"blob-num js-line-number\" data-line-number=\"68\"><\/td>\n        <td id=\"file-main-py-LC68\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L69\" class=\"blob-num js-line-number\" data-line-number=\"69\"><\/td>\n        <td id=\"file-main-py-LC69\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c1\">print<\/span> <span class=\"pl-s\"><span class=\"pl-pds\">&quot;<\/span>New synaptic weights after training: <span class=\"pl-pds\">&quot;<\/span><\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L70\" class=\"blob-num js-line-number\" data-line-number=\"70\"><\/td>\n        <td id=\"file-main-py-LC70\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c1\">print<\/span> neural_network.synaptic_weights<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L71\" class=\"blob-num js-line-number\" data-line-number=\"71\"><\/td>\n        <td id=\"file-main-py-LC71\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L72\" class=\"blob-num js-line-number\" data-line-number=\"72\"><\/td>\n        <td id=\"file-main-py-LC72\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c\"><span class=\"pl-c\">#<\/span> Test the neural network with a new situation.<\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L73\" class=\"blob-num js-line-number\" data-line-number=\"73\"><\/td>\n        <td id=\"file-main-py-LC73\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c1\">print<\/span> <span class=\"pl-s\"><span class=\"pl-pds\">&quot;<\/span>Considering new situation [1, 0, 0] -&gt; ?: <span class=\"pl-pds\">&quot;<\/span><\/span><\/td>\n      <\/tr>\n      <tr>\n        <td id=\"file-main-py-L74\" class=\"blob-num js-line-number\" data-line-number=\"74\"><\/td>\n        <td id=\"file-main-py-LC74\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-c1\">print<\/span> neural_network.think(array([<span class=\"pl-c1\">1<\/span>, <span class=\"pl-c1\">0<\/span>, <span class=\"pl-c1\">0<\/span>]))<\/td>\n      <\/tr>\n<\/table>\n\n\n  <\/div>\n\n  <\/div>\n<\/div>\n\n      <\/div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/miloharper/c5db6590f26d99ab2670/raw/bff459fbd922a31bc3988632cafb1687699a8d11/main.py\" style=\"float:right\">view raw<\/a>\n        <a href=\"https://gist.github.com/miloharper/c5db6590f26d99ab2670#file-main-py\">main.py<\/a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub<\/a>\n      <\/div>\n    <\/div>\n<\/div>\n')
